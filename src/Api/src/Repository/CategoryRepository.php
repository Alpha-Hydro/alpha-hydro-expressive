<?php

namespace Api\Repository;

use Api\Entity\Categories;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;


/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    /**
     * @param $fullPath
     * @return null|object
     * @TODO move to Service
     */
    public function findOneByFullPath($fullPath)
    {
        return $this->findOneBy([
            'fullPath' => $fullPath,
            'active' => 1,
            'deleted' => 0,
        ]);
    }

    /**
     * @param null $parentId
     * @return array
     * @TODO move to Service
     */
    public function findByActiveNoDeleted($parentId = null)
    {
        $categories = $this->findBy(
            [
                'parentId' => $parentId,
                'active' => 1,
                'deleted' => 0,
            ],
            ['sorting' => 'ASC']
        );

        return $categories;
    }

    /**
     * @return array
     * @TODO move to Service
     */
    public function findByParentNull()
    {
        $categories = $this->findBy(
            [
                'parentId' => null,
                'active' => 1,
                'deleted' => 0,
            ],
            ['sorting' => 'ASC']
        );

        return $categories;
    }

    /**
     * @param int $parentId
     * @return array
     * @TODO move to Service
     */
    public function findByNoDeleted($parentId = 0)
    {
        $categories = $this->findBy(
            [
                'parentId' => $parentId,
                'deleted' => 0,
            ],
            ['sorting' => 'ASC']
        );

        return $categories;
    }

    /**
     * @param int $parentId
     * @return array
     * @TODO move to Service
     */
    public function findByDeleted($parentId = 0)
    {
        $categories = $this->findBy(
            [
                'parentId' => $parentId,
                'deleted' => 1,
            ],
            ['sorting' => 'ASC']
        );

        return $categories;
    }

    /**
     * @param int $parentId
     * @return array|int
     * @TODO move to Service
     */
    public function treeCategories($parentId = null)
    {

        /** @var Collection $categories */
        $categories = $this->findByActiveNoDeleted($parentId);


        $result = [];

        /** @var Categories $category */
        foreach ($categories as $category){
            $children = $category->getChildren();
            if ($children->count() != 0){
                $result[] = [
                    'name' => $category->getName(),
                    'link' => $category->getFullPath(),
                    'children' => $this->_fetchSubCategoriesInArrayName($children),
                ];
            }
        }

        return $result;
    }

    /**
     * @param int $count
     * @return array
     */
    public function findCategoriesByCountChildren($count = 0)
    {
        $entityManager = $this->getEntityManager();

        $rsm = new ResultSetMappingBuilder($entityManager);
        $rsm->addRootEntityFromClassMetadata(Categories::class, 'c');

        $nativeQuery = $entityManager->createNativeQuery(
            "SELECT *
                      FROM categories AS c1
                      WHERE (
                          SELECT COUNT(*)
                          FROM categories AS c2
                          WHERE c2.parent_id = c1.id) = ?
                      AND c1.active != 0
                      AND c1.deleted != 1
                      ORDER BY c1.id;"
            , $rsm
        );
        $nativeQuery->setParameter(1, $count);

        return $nativeQuery->getResult();
    }

    /**
     * @return array
     * @TODO move to Service
     */
    public function findCategoriesDoubleName(){

        /** @var Collection | Categories[] $categories */
        $categories = $this->findBy(
            [
                'active' => 1,
                'deleted' => 0,
            ]
        );
        $result = [];

        foreach ($categories as $category){
            $name = $category->getName();

            /** @var Categories $child */
            foreach ($category->getChildren() as $child){
                if ($child->getName() == $name)
                    $result[] = $category;
            }
        }

        return $result;
    }

    /**
     * @param Collection $categories
     * @return array
     * @TODO move to Service
     */
    private function _fetchSubCategoriesInArrayName(Collection $categories)
    {
        $result = [];

        /** @var Categories[] $categories */
        foreach ($categories as $category){
            if ($category->getChildren()->count() != 0)
                $result[] = [
                    'name' => $category->getName(),
                    'link' => $category->getFullPath(),
                    'children' => $this->_fetchSubCategoriesInArrayName($category->getChildren()),
                ];
        }

        return $result;
    }

}
